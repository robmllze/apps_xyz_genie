//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY XYZ_GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_generate_screen_settings.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class ModelGenerateScreenSettings extends _ModelGenerateScreenSettings {
  //
  //
  //

  static const CLASS = 'ModelGenerateScreenSettings';
  static const MODEL_ID = 'model_generate_screen_settings';

  static const K_CLASS_NAME = 'class_name';
  static const K_DEFAULT_TITLE = 'default_title';
  static const K_EMAIL = 'email';
  static const K_ID = 'id';
  static const K_INTERNAL_PARAMETERS = 'internal_parameters';
  static const K_IS_ONLY_ACCESSIBLE_IF_LOGGED_IN =
      'is_only_accessible_if_logged_in';
  static const K_IS_ONLY_ACCESSIBLE_IF_LOGGED_IN_AND_VERIFIED =
      'is_only_accessible_if_logged_in_and_verified';
  static const K_IS_ONLY_ACCESSIBLE_IF_LOGGED_OUT =
      'is_only_accessible_if_logged_out';
  static const K_MAKEUP = 'makeup';
  static const K_NAVIGATION_CONTROL_WIDGET = 'navigation_control_widget';
  static const K_QUERY_PARAMETERS = 'query_parameters';

  String? className;
  String? defaultTitle;
  String? email;
  Map<String, String>? internalParameters;
  bool? isOnlyAccessibleIfLoggedIn;
  bool? isOnlyAccessibleIfLoggedInAndVerified;
  bool? isOnlyAccessibleIfLoggedOut;
  String? makeup;
  String? navigationControlWidget;
  Set<String>? queryParameters;

  //
  //
  //

  ModelGenerateScreenSettings({
    String? id,
    this.className,
    this.defaultTitle,
    this.email,
    this.internalParameters,
    this.isOnlyAccessibleIfLoggedIn,
    this.isOnlyAccessibleIfLoggedInAndVerified,
    this.isOnlyAccessibleIfLoggedOut,
    this.makeup,
    this.navigationControlWidget,
    this.queryParameters,
  }) {
    this.id = id;
  }

  //
  //
  //

  ModelGenerateScreenSettings.unsafe({
    String? id,
    this.className,
    this.defaultTitle,
    this.email,
    this.internalParameters,
    this.isOnlyAccessibleIfLoggedIn,
    this.isOnlyAccessibleIfLoggedInAndVerified,
    this.isOnlyAccessibleIfLoggedOut,
    this.makeup,
    this.navigationControlWidget,
    this.queryParameters,
  }) {
    this.id = id;
  }

  //
  //
  //

  factory ModelGenerateScreenSettings.from(
    Model? other,
  ) {
    return ModelGenerateScreenSettings.unsafe()..updateWith(other);
  }

  //
  //
  //

  factory ModelGenerateScreenSettings.of(
    ModelGenerateScreenSettings? other,
  ) {
    return ModelGenerateScreenSettings.unsafe()..updateWith(other);
  }

  //
  //
  //

  factory ModelGenerateScreenSettings.fromJsonString(
    String? source,
  ) {
    try {
      if (source != null && source.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelGenerateScreenSettings.fromJson(decoded);
      } else {
        return ModelGenerateScreenSettings.unsafe();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelGenerateScreenSettings.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelGenerateScreenSettings.unsafe(
        className: otherData?[K_CLASS_NAME]?.toString().trim().nullIfEmpty,
        defaultTitle:
            otherData?[K_DEFAULT_TITLE]?.toString().trim().nullIfEmpty,
        email: otherData?[K_EMAIL]?.toString().trim().nullIfEmpty,
        id: otherData?[K_ID]?.toString().trim().nullIfEmpty,
        internalParameters: letMap(otherData?[K_INTERNAL_PARAMETERS])
            ?.map(
              (final p0, final p1) => MapEntry(
                p0?.toString().trim().nullIfEmpty,
                p1?.toString().trim().nullIfEmpty,
              ),
            )
            .nonNulls
            .nullIfEmpty
            ?.cast(),
        isOnlyAccessibleIfLoggedIn:
            letBool(otherData?[K_IS_ONLY_ACCESSIBLE_IF_LOGGED_IN]),
        isOnlyAccessibleIfLoggedInAndVerified:
            letBool(otherData?[K_IS_ONLY_ACCESSIBLE_IF_LOGGED_IN_AND_VERIFIED]),
        isOnlyAccessibleIfLoggedOut:
            letBool(otherData?[K_IS_ONLY_ACCESSIBLE_IF_LOGGED_OUT]),
        makeup: otherData?[K_MAKEUP]?.toString().trim().nullIfEmpty,
        navigationControlWidget: otherData?[K_NAVIGATION_CONTROL_WIDGET]
            ?.toString()
            .trim()
            .nullIfEmpty,
        queryParameters: letSet(otherData?[K_QUERY_PARAMETERS])
            ?.map(
              (final p0) => p0?.toString().trim().nullIfEmpty,
            )
            .nonNulls
            .nullIfEmpty
            ?.toSet()
            .cast(),
      );
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_CLASS_NAME: className?.toString().trim().nullIfEmpty,
        K_DEFAULT_TITLE: defaultTitle?.toString().trim().nullIfEmpty,
        K_EMAIL: email?.toString().trim().nullIfEmpty,
        K_ID: id?.toString().trim().nullIfEmpty,
        K_INTERNAL_PARAMETERS: internalParameters
            ?.map(
              (final p0, final p1) => MapEntry(
                p0?.toString().trim().nullIfEmpty,
                p1?.toString().trim().nullIfEmpty,
              ),
            )
            .nonNulls
            .nullIfEmpty,
        K_IS_ONLY_ACCESSIBLE_IF_LOGGED_IN: isOnlyAccessibleIfLoggedIn,
        K_IS_ONLY_ACCESSIBLE_IF_LOGGED_IN_AND_VERIFIED:
            isOnlyAccessibleIfLoggedInAndVerified,
        K_IS_ONLY_ACCESSIBLE_IF_LOGGED_OUT: isOnlyAccessibleIfLoggedOut,
        K_MAKEUP: makeup?.toString().trim().nullIfEmpty,
        K_NAVIGATION_CONTROL_WIDGET:
            navigationControlWidget?.toString().trim().nullIfEmpty,
        K_QUERY_PARAMETERS: queryParameters
            ?.map(
              (final p0) => p0?.toString().trim().nullIfEmpty,
            )
            .nonNulls
            .nullIfEmpty
            ?.toList(),
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelGenerateScreenSettings.unsafe() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelGenerateScreenSettings.unsafe()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelGenerateScreenSettings.fromJson(otherData);
      other.className != null ? this.className = other.className : null;
      other.defaultTitle != null
          ? this.defaultTitle = other.defaultTitle
          : null;
      other.email != null ? this.email = other.email : null;
      other.id != null ? this.id = other.id : null;
      other.internalParameters != null
          ? this.internalParameters = other.internalParameters
          : null;
      other.isOnlyAccessibleIfLoggedIn != null
          ? this.isOnlyAccessibleIfLoggedIn = other.isOnlyAccessibleIfLoggedIn
          : null;
      other.isOnlyAccessibleIfLoggedInAndVerified != null
          ? this.isOnlyAccessibleIfLoggedInAndVerified =
              other.isOnlyAccessibleIfLoggedInAndVerified
          : null;
      other.isOnlyAccessibleIfLoggedOut != null
          ? this.isOnlyAccessibleIfLoggedOut = other.isOnlyAccessibleIfLoggedOut
          : null;
      other.makeup != null ? this.makeup = other.makeup : null;
      other.navigationControlWidget != null
          ? this.navigationControlWidget = other.navigationControlWidget
          : null;
      other.queryParameters != null
          ? this.queryParameters = other.queryParameters
          : null;
    }
  }
}
