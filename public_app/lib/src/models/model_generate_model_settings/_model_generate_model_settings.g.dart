//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY XYZ_GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'model_generate_model_settings.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class ModelGenerateModelSettings extends _ModelGenerateModelSettings {
  //
  //
  //

  static const CLASS = 'ModelGenerateModelSettings';
  static const MODEL_ID = 'model_generate_model_settings';

  static const K_CLASS_NAME = 'class_name';
  static const K_DIRECTIVES = 'directives';
  static const K_EXPORTS_TEMPLATE_FILE_NAME = 'exports_template_file_name';
  static const K_FIELD_ENTRIES = 'field_entries';
  static const K_INCLUDE_ARGS = 'include_args';
  static const K_INCLUDE_ID = 'include_id';
  static const K_INHERITANCE_CONSTRUCTOR = 'inheritance_constructor';
  static const K_KEY_STRING_CASE = 'key_string_case';
  static const K_MODEL_TEMPLATE_FILE_NAME = 'model_template_file_name';
  static const K_OUTPUT_DIR_PATH = 'output_dir_path';
  static const K_SHOULD_INHERET = 'should_inheret';
  static const K_SUPER_CLASS_NAME = 'super_class_name';

  String? className;
  List<String>? directives;
  String? exportsTemplateFileName;
  List<ModelFieldEntry>? fieldEntries;
  bool? includeArgs;
  bool? includeId;
  String? inheritanceConstructor;
  StringCaseType? keyStringCase;
  String? modelTemplateFileName;
  String? outputDirPath;
  bool? shouldInheret;
  String? superClassName;

  //
  //
  //

  ModelGenerateModelSettings({
    this.className,
    this.directives,
    this.exportsTemplateFileName,
    this.fieldEntries,
    this.includeArgs,
    this.includeId,
    this.inheritanceConstructor,
    this.keyStringCase,
    this.modelTemplateFileName,
    this.outputDirPath,
    this.shouldInheret,
    this.superClassName,
  }) {}

  //
  //
  //

  ModelGenerateModelSettings.unsafe({
    this.className,
    this.directives,
    this.exportsTemplateFileName,
    this.fieldEntries,
    this.includeArgs,
    this.includeId,
    this.inheritanceConstructor,
    this.keyStringCase,
    this.modelTemplateFileName,
    this.outputDirPath,
    this.shouldInheret,
    this.superClassName,
  }) {}

  //
  //
  //

  factory ModelGenerateModelSettings.from(
    Model? other,
  ) {
    return ModelGenerateModelSettings.unsafe()..updateWith(other);
  }

  //
  //
  //

  factory ModelGenerateModelSettings.of(
    ModelGenerateModelSettings? other,
  ) {
    return ModelGenerateModelSettings.unsafe()..updateWith(other);
  }

  //
  //
  //

  factory ModelGenerateModelSettings.fromJsonString(
    String? source,
  ) {
    try {
      if (source != null && source.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelGenerateModelSettings.fromJson(decoded);
      } else {
        return ModelGenerateModelSettings.unsafe();
      }
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  factory ModelGenerateModelSettings.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return ModelGenerateModelSettings.unsafe(
        className: otherData?[K_CLASS_NAME]
            ?.toString()
            .trim()
            .nullIfEmpty
            ?.toPascalCase(),
        directives: letList(otherData?[K_DIRECTIVES])
            ?.map(
              (final p0) => p0?.toString().trim().nullIfEmpty,
            )
            .nonNulls
            .nullIfEmpty
            ?.toList()
            .cast(),
        exportsTemplateFileName: otherData?[K_EXPORTS_TEMPLATE_FILE_NAME]
            ?.toString()
            .trim()
            .nullIfEmpty,
        fieldEntries: letList(otherData?[K_FIELD_ENTRIES])
            ?.map(
              (final p0) => () {
                final a = letMap<String, dynamic>(p0);
                return a != null ? ModelFieldEntry.fromJson(a) : null;
              }(),
            )
            .nonNulls
            .nullIfEmpty
            ?.toList()
            .cast(),
        includeArgs: letBool(otherData?[K_INCLUDE_ARGS]),
        includeId: letBool(otherData?[K_INCLUDE_ID]),
        inheritanceConstructor: otherData?[K_INHERITANCE_CONSTRUCTOR]
            ?.toString()
            .trim()
            .nullIfEmpty,
        keyStringCase: StringCaseType.values
            .valueOf(letAs<String>(otherData?[K_KEY_STRING_CASE])),
        modelTemplateFileName: otherData?[K_MODEL_TEMPLATE_FILE_NAME]
            ?.toString()
            .trim()
            .nullIfEmpty,
        outputDirPath:
            otherData?[K_OUTPUT_DIR_PATH]?.toString().trim().nullIfEmpty,
        shouldInheret: letBool(otherData?[K_SHOULD_INHERET]),
        superClassName:
            otherData?[K_SUPER_CLASS_NAME]?.toString().trim().nullIfEmpty,
      );
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_CLASS_NAME: className?.toString().trim().nullIfEmpty?.toPascalCase(),
        K_DIRECTIVES: directives
            ?.map(
              (final p0) => p0?.toString().trim().nullIfEmpty,
            )
            .nonNulls
            .nullIfEmpty
            ?.toList(),
        K_EXPORTS_TEMPLATE_FILE_NAME:
            exportsTemplateFileName?.toString().trim().nullIfEmpty,
        K_FIELD_ENTRIES: fieldEntries
            ?.map(
              (final p0) => p0?.toJson(),
            )
            .nonNulls
            .nullIfEmpty
            ?.toList(),
        K_INCLUDE_ARGS: includeArgs,
        K_INCLUDE_ID: includeId,
        K_INHERITANCE_CONSTRUCTOR:
            inheritanceConstructor?.toString().trim().nullIfEmpty,
        K_KEY_STRING_CASE: keyStringCase?.name,
        K_MODEL_TEMPLATE_FILE_NAME:
            modelTemplateFileName?.toString().trim().nullIfEmpty,
        K_OUTPUT_DIR_PATH: outputDirPath?.toString().trim().nullIfEmpty,
        K_SHOULD_INHERET: shouldInheret,
        K_SUPER_CLASS_NAME: superClassName?.toString().trim().nullIfEmpty,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, e);
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return ModelGenerateModelSettings.unsafe() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (ModelGenerateModelSettings.unsafe()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = ModelGenerateModelSettings.fromJson(otherData);
      other.className != null ? this.className = other.className : null;
      other.directives != null ? this.directives = other.directives : null;
      other.exportsTemplateFileName != null
          ? this.exportsTemplateFileName = other.exportsTemplateFileName
          : null;
      other.fieldEntries != null
          ? this.fieldEntries = other.fieldEntries
          : null;
      other.includeArgs != null ? this.includeArgs = other.includeArgs : null;
      other.includeId != null ? this.includeId = other.includeId : null;
      other.inheritanceConstructor != null
          ? this.inheritanceConstructor = other.inheritanceConstructor
          : null;
      other.keyStringCase != null
          ? this.keyStringCase = other.keyStringCase
          : null;
      other.modelTemplateFileName != null
          ? this.modelTemplateFileName = other.modelTemplateFileName
          : null;
      other.outputDirPath != null
          ? this.outputDirPath = other.outputDirPath
          : null;
      other.shouldInheret != null
          ? this.shouldInheret = other.shouldInheret
          : null;
      other.superClassName != null
          ? this.superClassName = other.superClassName
          : null;
    }
  }
}
